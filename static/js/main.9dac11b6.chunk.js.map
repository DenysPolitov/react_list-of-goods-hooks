{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isStarted","setStart","isReversed","setReverse","NONE","sortType","setSortType","visibleGoods","goods","ALPABET","sort","good1","good2","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","onClick","current","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,oDAbCC,EAAkB,CACtB,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KAuHE,IAAME,EAAM,WACjB,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAiCF,oBAAS,GAA1C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAAgCJ,mBAASH,EAASQ,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAOMC,EA1HR,SACEC,EACAH,EACAH,GAEA,IAAMK,EAAY,YAAOC,GAEzB,OAAQH,GACN,KAAMT,EAASa,QACbF,EAAaG,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAME,cAAcD,MACxD,MACF,KAAMhB,EAASkB,OACbP,EAAaG,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMI,OAASH,EAAMG,UAS7D,OAJIb,GACFK,EAAaS,UAGRT,EAsGHU,CAAkBpB,EAAiBQ,EAAUH,GAEjD,OACE,qBAAKgB,UAAU,MAAf,SACGlB,EAEG,qCACE,wBACEmB,KAAK,SACLC,QAAS,kBAAMd,EAAYV,EAASa,UAFtC,iCAOA,wBACEU,KAAK,SACLC,QAAS,kBAAMd,EAAYV,EAASkB,SAFtC,4BAOA,wBACEK,KAAK,SACLC,QAAS,kBAAMjB,GAAW,SAAAkB,GAAO,OAAKA,MAFxC,qBAOA,wBACEF,KAAK,SACLC,QAAS,kBAnCnBjB,GAAW,QACXG,EAAYV,EAASQ,OAgCb,mBAOA,oBAAIc,UAAU,QAAd,SACGX,EAAae,KACZ,SAAAC,GAAI,OAAI,oBAAIL,UAAU,cAAd,SAAwCK,GAAPA,WAM/C,wBACEJ,KAAK,SACLC,QAAS,kBAAMnB,GAAS,IAF1B,sBC3LVuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9dac11b6.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { useState } from 'react';\nimport './App.css';\n\nconst goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\n// Use this function in the render method\nfunction getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n) {\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case (SortType.ALPABET):\n      visibleGoods.sort((good1, good2) => good1.localeCompare(good2));\n      break;\n    case (SortType.LENGTH):\n      visibleGoods.sort((good1, good2) => good1.length - good2.length);\n      break;\n    default:\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\n// type State = {\n//   isStarted: boolean,\n//   isReversed: boolean,\n//   sortType: SortType,\n// };\n\n// export class App extends React.Component<{}, State> {\n//   state = {\n//     isStarted: false,\n//     isReversed: false,\n//     sortType: SortType.NONE,\n//   };\n\n//   startApp = () => {\n//     this.setState((state) => ({ isStarted: !state.isStarted }));\n//   };\n\n//   reverseList = () => {\n//     this.setState((state) => ({ isReversed: !state.isReversed }));\n//   };\n\n//   changeSortType = (value: SortType) => {\n//     this.setState({ sortType: value });\n//   };\n\n//   resetOrder = () => {\n//     this.setState({ isReversed: false, sortType: 0 });\n//   };\n\n//   render() {\n//     const { isStarted, isReversed, sortType } = this.state;\n\n//     const visibleGoods\n//     = getReorderedGoods(goodsFromServer, sortType, isReversed);\n\n//     return (\n//       <div className=\"App\">\n//         {isStarted\n//           ? (\n//             <>\n//               <button\n//                 type=\"button\"\n//                 onClick={() => this.changeSortType(SortType.ALPABET)}\n//               >\n//                 Sort alphabetically\n//               </button>\n\n//               <button\n//                 type=\"button\"\n//                 onClick={() => this.changeSortType(SortType.LENGTH)}\n//               >\n//                 Sort by length\n//               </button>\n\n//               <button\n//                 type=\"button\"\n//                 onClick={() => this.reverseList()}\n//               >\n//                 Reverse\n//               </button>\n\n//               <button\n//                 type=\"button\"\n//                 onClick={() => this.resetOrder()}\n//               >\n//                 Reset\n//               </button>\n\n//               <ul className=\"Goods\">\n//                 {visibleGoods.map(\n//                   good => <li className=\"Goods__item\" key={good}>{good}</li>,\n//                 )}\n//               </ul>\n//             </>\n//           )\n//           : (\n//             <button\n//               type=\"button\"\n//               onClick={() => this.startApp()}\n//             >\n//               Start\n//             </button>\n//           )}\n//       </div>\n//     );\n//   }\n// }\n\nexport const App = () => {\n  const [isStarted, setStart] = useState(false);\n  const [isReversed, setReverse] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const resetOrder = () => {\n    setReverse(false);\n    setSortType(SortType.NONE);\n  };\n\n  const visibleGoods\n    = getReorderedGoods(goodsFromServer, sortType, isReversed);\n\n  return (\n    <div className=\"App\">\n      {isStarted\n        ? (\n          <>\n            <button\n              type=\"button\"\n              onClick={() => setSortType(SortType.ALPABET)}\n            >\n              Sort alphabetically\n            </button>\n\n            <button\n              type=\"button\"\n              onClick={() => setSortType(SortType.LENGTH)}\n            >\n              Sort by length\n            </button>\n\n            <button\n              type=\"button\"\n              onClick={() => setReverse(current => !current)}\n            >\n              Reverse\n            </button>\n\n            <button\n              type=\"button\"\n              onClick={() => resetOrder()}\n            >\n              Reset\n            </button>\n\n            <ul className=\"Goods\">\n              {visibleGoods.map(\n                good => <li className=\"Goods__item\" key={good}>{good}</li>,\n              )}\n            </ul>\n          </>\n        )\n        : (\n          <button\n            type=\"button\"\n            onClick={() => setStart(true)}\n          >\n            Start\n          </button>\n        )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}